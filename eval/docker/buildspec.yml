version: 0.2
env:
  variables:
    AWS_REGION: ap-northeast-1
    CLUSTER_NAME: eval-cluster
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo Dynamically finding VPC, subnet and security group
      - VPC_ID=$(aws ec2 describe-vpcs --filter "Name=tag:Name,Values=*EvalVpc*" --query "Vpcs[0].VpcId" --output text)
      - echo Found VPC $VPC_ID
      - SUBNET_ID=$(aws ec2 describe-subnets --filter "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=*Public*" --query "Subnets[0].SubnetId" --output text)
      - echo Using subnet $SUBNET_ID
      - echo Listing all security groups in VPC $VPC_ID
      - aws ec2 describe-security-groups --filter "Name=vpc-id,Values=$VPC_ID" --query "SecurityGroups[*].[GroupId,GroupName,Tags]" --output text
      - echo Trying to find ECS security group by tag name...
      - SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filter "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=*EcsSecurityGroup*" --query "SecurityGroups[0].GroupId" --output text)
      - echo Security group from tag query $SECURITY_GROUP_ID
      - |
        if [ -z "$SECURITY_GROUP_ID" ] || [ "$SECURITY_GROUP_ID" = "None" ]; then
          echo ECS security group not found by tag, trying to find by name...
          SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filter "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=*EvalSandboxECS*" --query "SecurityGroups[0].GroupId" --output text)
          echo Security group from name query: $SECURITY_GROUP_ID
        fi
      - |
        if [ -z "$SECURITY_GROUP_ID" ] || [ "$SECURITY_GROUP_ID" = "None" ]; then
          echo ECS security group not found by name either, using default security group
          SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filter "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=default" --query "SecurityGroups[0].GroupId" --output text)
          echo Default security group: $SECURITY_GROUP_ID
        fi
      - |
        if [ -z "$SECURITY_GROUP_ID" ] || [ "$SECURITY_GROUP_ID" = "None" ]; then
          echo No security groups found. This will cause an error.
          exit 1
        fi
      - echo Final security group ID $SECURITY_GROUP_ID
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - echo Listing all files
      - ls -al
      - echo Checking eval/docker directory
      - ls -al eval/docker
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG -f eval/docker/dockerfile .
      - docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest
  post_build:
    commands:
      - echo Pushing the Docker image to ECR...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"eval-container","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo Running ECS task...
      - echo Checking environment variables
      - echo Task Role ARN = $TASK_ROLE_ARN
      - echo Task Execution Role ARN = $TASK_EXECUTION_ROLE_ARN
      - envsubst < ./eval/definition-dev.json > /tmp/definition-dev.json
      - echo Showing contents of definition-dev.json after envsubst
      - cat /tmp/definition-dev.json
      - echo Verifying IAM roles...
      - aws iam get-role --role-name ecsTaskExecutionRole || echo ecsTaskExecutionRole not found
      - echo Registering task definition...
      - TASK_DEF_OUTPUT=$(aws ecs register-task-definition --cli-input-json file:///tmp/definition-dev.json)
      - echo Complete task definition registration output
      - echo "$TASK_DEF_OUTPUT"
      - export TASK_DEFINITION_ARN=$(echo "$TASK_DEF_OUTPUT" | jq -r '.taskDefinition.taskDefinitionArn')
      - echo Task definition ARN = $TASK_DEFINITION_ARN
      - |
        if [ -n "$HYDRA_PARAMS" ]; then
          export TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN
          envsubst < ./eval/run-dev.json | jq --argjson newParams "$(echo $HYDRA_PARAMS | tr ' ' '\n' | jq -R . | jq -s .)" '.overrides.containerOverrides[].command += $newParams' > /tmp/run-dev.json
        else
          export TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN
          envsubst < ./eval/run-dev.json > /tmp/run-dev.json
        fi
      - echo Showing contents of run-dev.json after envsubst
      - cat /tmp/run-dev.json
      - echo Running ECS task...
      - aws ecs describe-clusters --clusters ${CLUSTER_NAME} || echo Cluster ${CLUSTER_NAME} not found
      - aws ecs list-task-definitions --family-prefix eval-python-task || echo No task definitions found
      - aws ecs run-task --cli-input-json file:///tmp/run-dev.json
      # - echo Running ECS task...
      # - aws ecs run-task --cli-input-json file:///tmp/run-ecs-training-task-$DEPLOY_ENV.json
      # - TASK_DEFINITION=$(aws ecs list-task-definitions --sort DESC --query 'taskDefinitionArns[0]' --output text)
      # - aws ecs run-task --cluster "$CLUSTER_NAME" --task-definition "$TASK_DEFINITION" --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}"
      # - echo ECS Task Triggered Successfully!
      # - echo Waiting for task to complete...
      # - sleep 60 # 等待任务完成，根据实际情况调整等待时间
